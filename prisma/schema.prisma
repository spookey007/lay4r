generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
  binaryTargets = ["native", "rhel-openssl-1.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  walletAddress String    @unique
  username      String?   @unique
  displayName   String?
  bio           String?
  avatarUrl     String?
  avatarBlob    Bytes?    // Added field to store avatar image blob
  email         String?   @unique
  emailVerifiedAt DateTime?
  emailOtp        String?
  emailOtpExpiresAt DateTime?
  role          Int       @default(1) // 0=admin, 1=user
  sessions      Session[]
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  sentMessages      Message[] @relation("UserMessages")
  messageReactions  MessageReaction[]
  messageReads      MessageRead[]
  
  // Follow relationships
  following     Follow[] @relation("UserFollowing")
  followers     Follow[] @relation("UserFollowers")
  
  // Conversation participants
  conversations ConversationParticipant[]
  
  // Staking relationships
  stakingTransactions StakingTransaction[]
  stakingRewards      StakingReward[]
  stakingPositions    StakingPosition[]
}

model Session {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  expiresAt DateTime
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

model Nonce {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  expiresAt     DateTime
  walletAddress String
  value         String   @unique
  @@index([walletAddress])
}

model Post {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  content   String
  comments  Comment[]
  likes     Like[]
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  content   String
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  @@unique([userId, postId])
}

model Room {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String?
  messages  Message[]
}

model Message {
  id             String   @id @default(uuid())
  content        String
  imageBlob      Bytes?   // Added field to store image blob for chat images
  senderId       String
  roomId         String?  // Keep for backward compatibility
  conversationId String?  // New field for conversation-based messages
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  sender         User     @relation("UserMessages", fields: [senderId], references: [id])
  room           Room?    @relation(fields: [roomId], references: [id])
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  reactions      MessageReaction[]
  reads          MessageRead[]
}

model MessageReaction {
  id        String   @id @default(uuid())
  emoji     String
  userId    String
  messageId String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  message   Message  @relation(fields: [messageId], references: [id])

  @@unique([userId, messageId, emoji])
}

model MessageRead {
  id        String   @id @default(uuid())
  messageId String
  userId    String
  readAt    DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
}

model Follow {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  followerId  String
  followingId String
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model Conversation {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  type      String    @default("dm") // "dm" or "group"
  name      String?   // For group conversations
  participants ConversationParticipant[]
  messages  Message[]
}

model ConversationParticipant {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  conversationId String
  userId         String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
}

// Staking Models
model StakingTransaction {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  walletAddress String
  solAmount     Decimal  @db.Decimal(18, 9) // SOL amount staked
  l4Amount      Decimal  @db.Decimal(18, 9) // L4 tokens received
  l4Price       Decimal  @db.Decimal(18, 9) // L4 price at time of staking
  txHash        String   @unique
  status        String   @default("pending") // pending, confirmed, failed
  confirmedAt   DateTime?
  blockNumber   BigInt?
  lockPeriodDays Int     @default(180) // Lock period in days
  apr           Decimal  @db.Decimal(5, 4) // APR at time of staking (e.g., 0.3650 for 36.5%)
  
  @@index([walletAddress])
  @@index([status])
  @@index([createdAt])
}

model StakingPosition {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  walletAddress   String   @unique
  totalStaked     Decimal  @default(0) @db.Decimal(18, 9) // Total SOL staked
  totalL4Received Decimal  @default(0) @db.Decimal(18, 9) // Total L4 tokens received
  totalRewards    Decimal  @default(0) @db.Decimal(18, 9) // Total rewards earned
  pendingRewards  Decimal  @default(0) @db.Decimal(18, 9) // Pending rewards to claim
  lastStakeDate   DateTime?
  isActive        Boolean  @default(true)
  
  @@index([walletAddress])
  @@index([isActive])
}

model StakingReward {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  walletAddress String
  rewardAmount  Decimal  @db.Decimal(18, 9) // Reward amount in SOL
  claimTxHash   String?  @unique
  claimedAt     DateTime?
  daysStaked    Int      // Days staked when reward was calculated
  apr           Decimal  @db.Decimal(5, 4) // APR when reward was calculated
  transactionId String?  // Reference to the staking transaction
  
  @@index([walletAddress])
  @@index([claimedAt])
  @@index([createdAt])
}